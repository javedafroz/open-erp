version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: erp-postgres
    environment:
      POSTGRES_DB: erp_db
      POSTGRES_USER: erp_user
      POSTGRES_PASSWORD: erp_password
    ports:
      - '5432:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/db/init:/docker-entrypoint-initdb.d
    networks:
      - erp-network
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U erp_user -d erp_db']
      interval: 10s
      timeout: 5s
      retries: 5

  # Keycloak PostgreSQL Database
  keycloak-postgres:
    image: postgres:15-alpine
    container_name: keycloak-postgres
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: keycloak_password
    ports:
      - '5433:5432'
    volumes:
      - keycloak_postgres_data:/var/lib/postgresql/data
    networks:
      - erp-network
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U keycloak -d keycloak']
      interval: 10s
      timeout: 5s
      retries: 5

  # Keycloak Identity and Access Management
  keycloak:
    image: quay.io/keycloak/keycloak:24.0
    container_name: erp-keycloak
    environment:
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://keycloak-postgres:5432/keycloak
      KC_DB_USERNAME: keycloak
      KC_DB_PASSWORD: keycloak_password
      KC_HOSTNAME: localhost
      KC_HOSTNAME_PORT: 8080
      KC_HOSTNAME_STRICT_HTTPS: false
      KC_HOSTNAME_STRICT_BACKCHANNEL: false
      KC_HTTP_ENABLED: true
      KC_METRICS_ENABLED: true
      KC_HEALTH_ENABLED: true
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin_password
    ports:
      - '8080:8080'
      - '8443:8443'
    depends_on:
      keycloak-postgres:
        condition: service_healthy
    command: start-dev
    volumes:
      - ./docker/keycloak/themes:/opt/keycloak/themes
      - ./docker/keycloak/providers:/opt/keycloak/providers
    networks:
      - erp-network
    healthcheck:
      test: ['CMD-SHELL', 'curl -f http://localhost:8080/health/ready || exit 1']
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: erp-redis
    command: redis-server --appendonly yes --requirepass redis_password
    ports:
      - '6379:6379'
    volumes:
      - redis_data:/data
      - ./docker/redis/redis.conf:/etc/redis/redis.conf
    networks:
      - erp-network
    healthcheck:
      test: ['CMD', 'redis-cli', '--raw', 'incr', 'ping']
      interval: 10s
      timeout: 3s
      retries: 5

  # Message Queue (RabbitMQ)
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: erp-rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: erp_user
      RABBITMQ_DEFAULT_PASS: erp_password
    ports:
      - '5672:5672'
      - '15672:15672'
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - ./docker/rabbitmq/definitions.json:/etc/rabbitmq/definitions.json
      - ./docker/rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf
    networks:
      - erp-network
    healthcheck:
      test: ['CMD', 'rabbitmq-diagnostics', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5

  # Elasticsearch for Search and Analytics
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: erp-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - '9200:9200'
      - '9300:9300'
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - erp-network
    healthcheck:
      test: ['CMD-SHELL', 'curl -f http://localhost:9200/_health || exit 1']
      interval: 30s
      timeout: 10s
      retries: 5

  # MinIO Object Storage (S3 Compatible)
  minio:
    image: minio/minio:latest
    container_name: erp-minio
    environment:
      MINIO_ROOT_USER: erp_admin
      MINIO_ROOT_PASSWORD: erp_password123
    ports:
      - '9000:9000'
      - '9001:9001'
    volumes:
      - minio_data:/data
    networks:
      - erp-network
    command: server /data --console-address ":9001"
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:9000/minio/health/live']
      interval: 30s
      timeout: 20s
      retries: 3

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: erp-prometheus
    ports:
      - '9090:9090'
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - erp-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'

  # Grafana Dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: erp-grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin_password
      # Removed GF_INSTALL_PLUGINS to avoid TLS certificate issues
    ports:
      - '3002:3000'
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - erp-network
    depends_on:
      - prometheus

  # Auth Service
  auth-service:
    build:
      context: .
      dockerfile: Dockerfile.auth-service
    container_name: erp-auth-service
    environment:
      - NODE_ENV=development
      - PORT=3001
      - DATABASE_URL=postgresql://erp_user:erp_password@postgres:5432/erp_db
      - REDIS_URL=redis://:redis_password@redis:6379
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=redis_password
      - KEYCLOAK_BASE_URL=http://keycloak:8080
      - KEYCLOAK_URL=http://keycloak:8080
      - KEYCLOAK_REALM=erp-system
      - KEYCLOAK_CLIENT_ID=erp-frontend
      - KEYCLOAK_CLIENT_SECRET=""
      - KEYCLOAK_ADMIN_USER=admin
      - KEYCLOAK_ADMIN_PASSWORD=admin_password
      - JWT_SECRET=your-super-secret-jwt-key-change-in-production
    ports:
      - '3001:3001'
    networks:
      - erp-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      keycloak:
        condition: service_started
    restart: unless-stopped

  # CRM Service
  crm-service:
    build:
      context: .
      dockerfile: Dockerfile.crm-service
    container_name: erp-crm-service
    environment:
      - NODE_ENV=development
      - PORT=3003
      - DATABASE_URL=postgresql://erp_user:erp_password@postgres:5432/erp_db
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=erp_db
      - DB_USER=erp_user
      - DB_PASSWORD=erp_password
      - DB_SCHEMA=crm
      - REDIS_URL=redis://:redis_password@redis:6379
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=redis_password
      - REDIS_DB=1
      - RABBITMQ_URL=amqp://erp_user:erp_password@rabbitmq:5672
      - ELASTICSEARCH_URL=http://elasticsearch:9200
    ports:
      - '3003:3003'
    networks:
      - erp-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped

  # Web Application
  web-app:
    build:
      context: .
      dockerfile: Dockerfile.web-app
    container_name: erp-web-app
    environment:
      - VITE_API_BASE_URL=http://localhost
      - VITE_KEYCLOAK_URL=http://localhost:8080
      - VITE_KEYCLOAK_REALM=erp-realm
      - VITE_KEYCLOAK_CLIENT_ID=erp-frontend
    ports:
      - '3000:80'
    networks:
      - erp-network
    depends_on:
      - auth-service
      - crm-service
    restart: unless-stopped

volumes:
  postgres_data:
  keycloak_postgres_data:
  redis_data:
  rabbitmq_data:
  elasticsearch_data:
  minio_data:
  prometheus_data:
  grafana_data:

networks:
  erp-network:
    driver: bridge
