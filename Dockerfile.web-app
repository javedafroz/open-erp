# Web App Dockerfile
FROM node:20-alpine as builder

# Set working directory
WORKDIR /app

# Copy package files and config
COPY package*.json ./
COPY tsconfig.json ./
COPY packages/shared/package*.json ./packages/shared/
COPY packages/utils/package*.json ./packages/utils/
COPY packages/types/package*.json ./packages/types/
COPY apps/web-app/package*.json ./apps/web-app/

# Install all dependencies
RUN npm ci

# Copy shared packages source
COPY packages/ ./packages/

# Build shared packages
RUN npm run build --workspace=packages/shared --if-present
RUN npm run build --workspace=packages/utils --if-present
RUN npm run build --workspace=packages/types --if-present

# Copy web app source
COPY apps/web-app/ ./apps/web-app/

# Build web app for production
WORKDIR /app/apps/web-app
RUN npm run build

# Production stage with nginx
FROM nginx:alpine

# Install curl for health checks
RUN apk add --no-cache curl || echo "Warning: Could not install curl"

# Copy built app to nginx
COPY --from=builder /app/apps/web-app/dist /usr/share/nginx/html

# Copy nginx configuration
COPY <<EOF /etc/nginx/conf.d/default.conf
server {
    listen 80;
    server_name localhost;
    root /usr/share/nginx/html;
    index index.html index.htm;

    # Handle client-side routing
    location / {
        try_files \$uri \$uri/ /index.html;
    }

    # API proxy to backend services
    location /api/auth/ {
        proxy_pass http://auth-service:3001/api/;
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
    }

    location /api/crm/ {
        proxy_pass http://crm-service:3003/api/;
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
    }

    # Enable gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;
}
EOF

# Expose port
EXPOSE 80

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
  CMD curl -f http://localhost/ || exit 1

# Start nginx
CMD ["nginx", "-g", "daemon off;"]
